package main

import (
	"common/file"
	"os"
)

const kTemplate = `//Generated by common/gen_conf

package {{.P}}

import "sync/atomic"
{{range $_, $v := .VS}}
var _{{$v.N}} atomic.Value

func {{$v.F}}() {{$v.T}} { return _{{$v.N}}.Load().({{$v.T}}) }
func (v {{$v.T}}) Init() { _{{$v.N}}.Store(v) } //一块全新内存
{{end}}`

type info struct {
	T string //类型名，可能是指针
	N string //变量名
	F string //接口名
}

var g struct {
	P  string //package
	VS []info
}

func main() {
	g.P = os.Args[1]
	g.VS = make([]info, len(os.Args[2:]))
	for i, v := range os.Args[2:] {
		p := &g.VS[i]
		if p.T, p.N = v, v; p.T[0] == '*' {
			p.N = p.T[1:]
		}
		if p.F = p.N; p.N[0] >= 'a' && p.N[0] <= 'z' {
			tmp := []byte(p.N)
			tmp[0] -= 'a' - 'A'
			p.F = string(tmp)
		}
	}
	file.CreateTemplate(&g, "./", "gen_"+g.VS[0].N+".go", kTemplate)
}
